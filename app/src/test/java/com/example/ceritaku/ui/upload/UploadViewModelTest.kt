package com.example.ceritaku.ui.uploadimport androidx.arch.core.executor.testing.InstantTaskExecutorRuleimport androidx.lifecycle.MutableLiveDataimport com.example.ceritaku.data.AppRepositoryimport com.example.ceritaku.data.Resultimport com.example.ceritaku.model.UploadStoryResponseimport com.example.ceritaku.utils.DataDummyimport com.example.ceritaku.utils.getOrAwaitValueimport okhttp3.MediaType.Companion.toMediaTypeimport okhttp3.MediaType.Companion.toMediaTypeOrNullimport okhttp3.MultipartBodyimport okhttp3.RequestBody.Companion.asRequestBodyimport okhttp3.RequestBody.Companion.toRequestBodyimport org.junit.Assertimport org.junit.Beforeimport org.junit.Ruleimport org.junit.Testimport org.junit.runner.RunWithimport org.mockito.Mockimport org.mockito.Mockitoimport org.mockito.junit.MockitoJUnitRunnerimport java.io.File@RunWith(MockitoJUnitRunner::class)class UploadViewModelTest {    @get:Rule    val instantExecutorRule = InstantTaskExecutorRule()    @Mock    private lateinit var appRepository: AppRepository    private lateinit var uploadViewModel: UploadViewModel    private var dataDummyResponse = DataDummy.generateDummySuccesUpload()    private var dataDummyDesc = "description".toRequestBody("text/plain".toMediaType())    private var dataDummyLat = 0.0123    private var dataDummyLon = 0.0123    private val file: File = Mockito.mock(File::class.java)    private val requestImageFile = file.asRequestBody("image/jpg".toMediaTypeOrNull())    private val imageMultipart: MultipartBody.Part = MultipartBody.Part.createFormData(        "photo",        file.name,        requestImageFile    )    @Before    fun setup(){        uploadViewModel = UploadViewModel(appRepository)    }    @Test    fun `when Post Create Story Should Not Null and Return Success`() {        val expected = MutableLiveData<Result<UploadStoryResponse>>()        expected.value = Result.Success(dataDummyResponse)        Mockito.`when`(            appRepository.uploadStory(                imageFile = imageMultipart,                desc = dataDummyDesc,                lat = dataDummyLat,                lon = dataDummyLon            )        ).thenReturn(expected)        val actual= uploadViewModel.uploadStory(            imageFile = imageMultipart,            desc = dataDummyDesc,            lat = dataDummyLat,            lon = dataDummyLon        ).getOrAwaitValue()        Mockito.verify(appRepository).uploadStory(            imageFile = imageMultipart,            desc = dataDummyDesc,            lat = dataDummyLat,            lon = dataDummyLon        )        Assert.assertNotNull(actual)        Assert.assertTrue(actual is Result.Success)    }    @Test    fun `when Post Create Story Should Null and Return Error`() {        dataDummyResponse = DataDummy.generateDummyErrorUpload()        val expected = MutableLiveData<Result<UploadStoryResponse>>()        expected.value = Result.Error("error")        Mockito.`when`(            appRepository.uploadStory(                imageFile = imageMultipart,                desc = dataDummyDesc,                lat = dataDummyLat,                lon = dataDummyLon            )        ).thenReturn(expected)        val actual = uploadViewModel.uploadStory(            imageFile = imageMultipart,            desc = dataDummyDesc,            lat = dataDummyLat,            lon = dataDummyLon        ).getOrAwaitValue()        Mockito.verify(appRepository).uploadStory(            imageFile = imageMultipart,            desc = dataDummyDesc,            lat = dataDummyLat,            lon = dataDummyLon        )        Assert.assertNotNull(actual)        Assert.assertTrue(actual is Result.Error)    }    @Test    fun `when Post Create Story Not Loc Should Not Null and Return Success`() {        val expected = MutableLiveData<Result<UploadStoryResponse>>()        expected.value = Result.Success(dataDummyResponse)        Mockito.`when`(            appRepository.uploadStoryNotLoc(                imageFile = imageMultipart,                desc = dataDummyDesc,            )        ).thenReturn(expected)        val actual= uploadViewModel.uploadStoryNotLoc(            imageFile = imageMultipart,            desc = dataDummyDesc        ).getOrAwaitValue()        Mockito.verify(appRepository).uploadStoryNotLoc(            imageFile = imageMultipart,            desc = dataDummyDesc        )        Assert.assertNotNull(actual)        Assert.assertTrue(actual is Result.Success)    }    @Test    fun `when Post Create Story Not Loc Should Null and Return Error`() {        dataDummyResponse = DataDummy.generateDummyErrorUpload()        val expected = MutableLiveData<Result<UploadStoryResponse>>()        expected.value = Result.Error("error")        Mockito.`when`(            appRepository.uploadStoryNotLoc(                imageFile = imageMultipart,                desc = dataDummyDesc            )        ).thenReturn(expected)        val actual = uploadViewModel.uploadStoryNotLoc(            imageFile = imageMultipart,            desc = dataDummyDesc        ).getOrAwaitValue()        Mockito.verify(appRepository).uploadStoryNotLoc(            imageFile = imageMultipart,            desc = dataDummyDesc        )        Assert.assertNotNull(actual)        Assert.assertTrue(actual is Result.Error)    }}